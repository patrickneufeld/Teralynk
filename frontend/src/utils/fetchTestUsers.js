import { CognitoIdentityProviderClient, ListUsersCommand } from "@aws-sdk/client-cognito-identity-provider";
import { SecretsManagerClient, GetSecretValueCommand } from "@aws-sdk/client-secrets-manager";

const region = "us-east-1"; // ‚úÖ Ensure this is correct

// üîπ AWS Clients
const secretsClient = new SecretsManagerClient({ region });
const cognitoClient = new CognitoIdentityProviderClient({ region });

// üîç Fetch AWS Secret
const getSecret = async (secretName) => {
    try {
        console.log(`üîç Retrieving secret: ${secretName}...`);
        const command = new GetSecretValueCommand({ SecretId: secretName });
        const response = await secretsClient.send(command);
        if (!response.SecretString) throw new Error(`üö® Secret "${secretName}" is empty!`);

        const parsedSecret = JSON.parse(response.SecretString.trim()); // üöÄ Ensure clean parsing
        console.log(`‚úÖ Secret Retrieved:`, parsedSecret);
        return parsedSecret;
    } catch (error) {
        console.error(`‚ùå Failed to fetch secret: ${secretName}`, error);
        return null;
    }
};

// üîç Fetch Cognito Test Users
const fetchTestUsers = async () => {
    try {
        // üîπ Retrieve Cognito Credentials
        const secrets = await getSecret("Teralynk_Cognito");
        if (!secrets) throw new Error("‚ùå Missing AWS Cognito secrets!");

        const userPoolId = secrets.userPoolId || secrets.COGNITO_USER_POOL_ID; // Ensure fallback
        if (!userPoolId) throw new Error("‚ùå Missing Cognito User Pool ID!");

        console.log(`üîç Fetching users from Cognito User Pool: ${userPoolId}...`);

        const command = new ListUsersCommand({
            UserPoolId: userPoolId,
            Limit: 10, // Adjust as needed
        });

        const response = await cognitoClient.send(command);
        if (!response.Users || response.Users.length === 0) {
            console.warn("‚ö†Ô∏è No test users found in Cognito.");
            return [];
        }

        console.log("‚úÖ Test Users Found:", response.Users.map(user => ({
            username: user.Username,
            email: user.Attributes.find(attr => attr.Name === "email")?.Value || "N/A",
            createdAt: user.UserCreateDate,
            status: user.UserStatus
        })));

        return response.Users;
    } catch (error) {
        console.error("‚ùå Error fetching test users:", error);
    }
};

// ‚úÖ Run the function if executed as a standalone script
if (import.meta.url === `file://${process.argv[1]}`) {
    fetchTestUsers();
}

export default fetchTestUsers;
